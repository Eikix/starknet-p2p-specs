syntax = "proto3";

import "p2p/proto/common.proto";
import "p2p/proto/propagation.proto";

// request a range from the contract state tree that matches the given root (block)
// starts at 'start' and ends no less than 'end'.
// the result is a stream of ContractRange and PatriciaRangeProof
message GetContractRange {
    uint32 request_id = 1;
    Hash root = 2;
    Hash start = 3;
    Hash end = 4;
    uint32 chunks_per_proof = 5; // how many ContractRange items to send before sending a proof
}



message PatriciaNode {
    // 9 bytes for an edge (1 byte length, felt path, felt value),
    // 8 bytes for binary (left and right felt)
    bytes data = 1;
}

// internal nodes required to build the trie given the range (leaves)
message PatriciaRangeProof {
    PatriciaNode nodes = 3;
}

// stream
message ContractRange {
    uint32 request_id = 1;
    repeated ContractState state = 2;
}

// duplicate of GetContractRange. Can introduce a 'type' instead.
message GetClassRange {
    uint32 request_id = 1;
    Hash root = 2;
    Hash start = 3;
    Hash end = 4;
    uint32 chunks_per_proof = 5;
}


message ClassRange {
    uint32 request_id = 1;
    repeated Class classes = 2;
}

message StorageRangeQuery {
    uint32 range_id = 1;
    Hash root = 2;
    Hash start = 3;
    Hash end = 4;
}

message GetContractStorageRange {
    uint32 request_id = 1;
    Hash state_root = 2;
    repeated StorageRangeQuery query = 3;
}

message ContractStorageRange {
    uint32 request_id = 1;
    uint32 range_id = 2;
    // add Address contract ?
    repeated ContractStoredValue keyValue = 3;
}
